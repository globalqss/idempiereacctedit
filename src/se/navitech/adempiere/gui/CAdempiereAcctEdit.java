/*
 * CAdempiereAcctEdit.java
 *
 * Created on den 31 december 2005, 16:40
 */

package se.navitech.adempiere.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.Iterator;
import java.util.Properties;
import java.util.TreeMap;

import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

import se.navitech.adempiere.CDefaultAccount;

/**
 *
 * @author  Daniel Norin
 */
public class CAdempiereAcctEdit extends JFrame {
    /**
	 * 
	 */
	private static final long serialVersionUID = -842883693347171307L;

	private static File    m_currentDirectory;
    
    private static final String PROPSFILENAME="iDempiereAcctEdit.properties";
    
    private static Properties m_globalProps;
    
    private TreeMap<String, CDefaultAccount>  m_defaultAccounts;
    
    /**
     * Creates new form CAdempiereAcctEdit
     */
    public CAdempiereAcctEdit() {
        initComponents();
        
        /** Load default accounts from file */
        loadDefaultAccounts();
        
        // See if we have a properties file
        File propsFile = new File(System.getProperty("user.home") + File.separator + PROPSFILENAME);
        m_globalProps = new Properties();
        if (propsFile.exists()) {
            try {
                // Read the properties
                m_globalProps.loadFromXML(new BufferedInputStream(new FileInputStream(propsFile)));
            } catch (Exception e) {
                e.printStackTrace(System.err);
            }
        } else {
            System.out.println("Didn't find " + propsFile.getAbsolutePath());
        }
        
        // Get current directory from properties
        String currentDir = m_globalProps.getProperty("defaultDirectory");
        if (currentDir!=null) {
            m_currentDirectory = new File(currentDir);
        } else {
            m_currentDirectory = new File(System.getProperty("user.home"));
        }
        
    }
    
    public static File  getCurrentDirectory() {
        return(m_currentDirectory);
    }
    
    /**
     * Loads default accounts into a tree map
     */
    private void loadDefaultAccounts() {
        
        Properties props = new Properties();
        try {
            props.load(ClassLoader.getSystemResourceAsStream("default_accounts.properties"));
            // Put the properties in the tree map
            m_defaultAccounts = new TreeMap<String, CDefaultAccount>();
            String key;
            for (Iterator<?> it = props.keySet().iterator(); it.hasNext(); ) {
                key = (String)it.next();
                m_defaultAccounts.put(key, new CDefaultAccount(key, props.getProperty(key)));
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        desktopPane = new JDesktopPane();
        menuBar = new JMenuBar();
        fileMenu = new JMenu();
        newFileMenuItem = new JMenuItem();
        openMenuItem = new JMenuItem();
        fileMenuSeparator = new JSeparator();
        exitMenuItem = new JMenuItem();
        helpMenu = new JMenu();
        aboutMenuItem = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("iDempiere Account Editor");
        setName("iDempiereAcctEditMain");
        desktopPane.setBackground(new java.awt.Color(0, 0, 153));
        desktopPane.setOpaque(false);
        desktopPane.setPreferredSize(new java.awt.Dimension(450, 300));
        getContentPane().add(desktopPane, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        newFileMenuItem.setMnemonic('n');
        newFileMenuItem.setText("New schema file");
        newFileMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                newFileMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(newFileMenuItem);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open Schema File");
        openMenuItem.setToolTipText("Open Schema File");
        openMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        fileMenu.add(fileMenuSeparator);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");
        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-923)/2, (screenSize.height-725)/2, 923, 725);
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        CAboutDialog aboutDialog = new CAboutDialog(this, true);
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void newFileMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_newFileMenuItemActionPerformed
        newSchemaFile();
    }//GEN-LAST:event_newFileMenuItemActionPerformed

    private void openMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        openSchemaFile();
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    /**
     * Create a blank schema file
     */
    public void newSchemaFile() {
        
        CSchemaFileMainFrame schemaFileFrame = new CSchemaFileMainFrame(null, m_defaultAccounts);
        schemaFileFrame.setVisible(true);
        desktopPane.add(schemaFileFrame);
        // TODO: Make automatic location
        schemaFileFrame.setLocation(0,0);
        try {
            schemaFileFrame.setSelected(true);
        } catch (java.beans.PropertyVetoException e) {
            e.printStackTrace(System.err);
        }
        
    }
    
    /**
     * Lets the user select a file to open
     */
    private void openSchemaFile() {
        
        JFileChooser fc = new JFileChooser();
        if (m_currentDirectory!=null) {
            fc.setCurrentDirectory(m_currentDirectory);
        }
        fc.setDialogTitle("Choose Schema File to open");
        int result = fc.showOpenDialog(this);
        if (result==JFileChooser.APPROVE_OPTION) {
            // Set the current directory
            m_currentDirectory = fc.getCurrentDirectory();
            // Open the file
            CSchemaFileMainFrame schemaFileFrame = new CSchemaFileMainFrame(fc.getSelectedFile(), m_defaultAccounts);
            schemaFileFrame.setVisible(true);
            desktopPane.add(schemaFileFrame);
            // TODO: Make automatic location
            schemaFileFrame.setLocation(0,0);
            try {
                schemaFileFrame.setSelected(true);
            } catch (java.beans.PropertyVetoException e) {}
        }
        
    }
    
    private void exitMenuItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        
        // Save properties file
        try {
            // Save current directory
            m_globalProps.setProperty("defaultDirectory", m_currentDirectory.getAbsolutePath());
            m_globalProps.storeToXML(new BufferedOutputStream(new java.io.FileOutputStream(System.getProperty("user.home") + File.separator + PROPSFILENAME)), null);
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
        
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CAdempiereAcctEdit().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JMenuItem aboutMenuItem;
    private JDesktopPane desktopPane;
    private JMenuItem exitMenuItem;
    private JMenu fileMenu;
    private JSeparator fileMenuSeparator;
    private JMenu helpMenu;
    private JMenuBar menuBar;
    private JMenuItem newFileMenuItem;
    private JMenuItem openMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
